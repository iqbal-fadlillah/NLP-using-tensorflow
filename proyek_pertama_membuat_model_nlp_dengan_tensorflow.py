# -*- coding: utf-8 -*-
"""Proyek_Pertama_Membuat_Model_NLP_dengan_TensorFlow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/167APnn2ni3015i0E-jweKFKsXTVppFz_

Submission Proyek Pertama : Membuat Model NLP dengan TensorFlow

Nama: Muhammad Iqbal Fadlillah

Domisili: Kota Bandung, Jawa Barat

Email: m011x0093@dicoding.org, muhammadmif23@gmail.com
"""

# Import Library are required
import pandas as pd
from google.colab import files
uploaded = files.upload()

# Open dataset file 
df = pd.read_csv('Language_Detection.csv')

df.tail()

# Edit The Data Frame
category = pd.get_dummies(df.Language)
df_baru = pd.concat([df, category], axis=1)
df_baru = df_baru.drop(columns='Language')
df_baru

# Separate the atribute and labels
text = df_baru['Text'].values
label = df_baru[['Dutch', 'English', 'French']].values

# Split the data using train_test_split
from sklearn.model_selection import train_test_split
text_latih, text_test, label_latih, label_test = train_test_split(text, label, test_size=0.2)

# Tokenizer the data
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
 
tokenizer = Tokenizer(num_words=10000, oov_token='x')
tokenizer.fit_on_texts(text_latih) 
tokenizer.fit_on_texts(text_test)
 
sekuens_latih = tokenizer.texts_to_sequences(text_latih)
sekuens_test = tokenizer.texts_to_sequences(text_test)

padded_latih = pad_sequences(sekuens_latih) 
padded_test = pad_sequences(sekuens_test)

# Make CNN Layer
import tensorflow as tf
model = tf.keras.Sequential([
      tf.keras.layers.Embedding(input_dim=10000, output_dim=16, input_length=None),
      tf.keras.layers.LSTM(256, dropout=0.1, recurrent_dropout=0.3),
      tf.keras.layers.Dense(512, activation='relu'),
      tf.keras.layers.Dropout(0.5),
      tf.keras.layers.Dense(256, activation='relu'),
      tf.keras.layers.Dropout(0.5),
      tf.keras.layers.Dense(128, activation='relu'),
      tf.keras.layers.Dropout(0.5),
      tf.keras.layers.Dense(64, activation='relu'),
      tf.keras.layers.Dropout(0.5),
      tf.keras.layers.Dense(32, activation='relu'),
      tf.keras.layers.Dropout(0.5),
      tf.keras.layers.Dense(16, activation='relu'),
      tf.keras.layers.Dropout(0.5),
      tf.keras.layers.Dense(3, activation='softmax')
])
model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

# Make CallBack Function
class TestCallback(tf.keras.callbacks.Callback): 
    def on_epoch_end(self, epoch, logs={}): 
        if(logs.get('accuracy') > 0.90 and logs.get('val_accuracy') > 0.90):
            print("\nAkurasi telah mencapai >=90%!") 
            self.model.stop_training = True 
callbacks = TestCallback()

#Train Model 
model_train = model.fit(
            padded_latih, 
            label_latih, 
            epochs=25, 
            steps_per_epoch=30,
            validation_data=(padded_test, label_test), verbose=1, callbacks = [callbacks])

from matplotlib import pyplot as plt
# Creating accuracy plots for CNN models
plt.figure(figsize=(10,4))
plt.plot(model_train.history['accuracy'])
plt.plot(model_train.history['val_accuracy'])
plt.title('CNN model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.grid(True)
plt.show()
print()

# Creating loss plots for CNN models
plt.figure(figsize=(10,4))
plt.plot(model_train.history['loss'])
plt.plot(model_train.history['val_loss'])
plt.title('CNN model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.grid(True)
plt.show()